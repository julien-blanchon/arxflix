name: Make targets CI

on:
  push:
    branches: ["**"]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linux-pc:
    name: PC make (Ubuntu)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      GRADIO_SERVER_NAME: 127.0.0.1
      GRADIO_SERVER_PORT: 7860
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements-docker.txt

      - name: System dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg libsndfile1 curl

      - name: make install (auto-detects PC)
        run: make install

      - name: Start Gradio (background)
        run: |
          set -euxo pipefail
          nohup make run > gradio.log 2>&1 &
          echo $! > gradio_make_pid.txt || true

      - name: Wait for Gradio to respond
        run: |
          set -euxo pipefail
          for i in {1..120}; do
            if curl -fsS http://127.0.0.1:7860/ >/dev/null; then
              echo "Gradio is up"; exit 0; fi
            sleep 1
          done
          echo "Gradio did not start in time" >&2
          tail -n 200 gradio.log || true
          exit 1

      - name: Teardown Gradio
        if: always()
        run: |
          set -euxo pipefail
          if pgrep -f 'arxflix_gradio.py' >/dev/null; then
            pkill -f 'arxflix_gradio.py' || true
          fi
          sleep 2 || true
          if pgrep -f 'arxflix_gradio.py' >/dev/null; then
            pkill -9 -f 'arxflix_gradio.py' || true
          fi
          tail -n 200 gradio.log || true

  docker:
    name: Docker make
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build image
        run: docker build -t arxflix .

      - name: Run container
        run: |
          set -euxo pipefail
          docker run -d --name arxflix-test -p 7860:7860 arxflix
          for i in {1..180}; do
            if curl -fsS http://127.0.0.1:7860/ >/dev/null; then
              echo "Container Gradio is up"; exit 0; fi
            sleep 1
          done
          echo "Container did not start in time" >&2
          docker logs arxflix-test || true
          exit 1

      - name: Logs and teardown
        if: always()
        run: |
          set -euxo pipefail
          docker logs arxflix-test || true
          docker rm -f arxflix-test || true

  macos:
    name: mac make (manual/heavy)
    # Run only on manual trigger or schedule to avoid heavy installs on PRs
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: macos-latest
    timeout-minutes: 90
    env:
      GRADIO_SERVER_NAME: 127.0.0.1
      GRADIO_SERVER_PORT: 7860
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Homebrew deps
        run: |
          brew update
          brew install ffmpeg libsndfile pnpm

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: make install (auto-detects macOS)
        run: make install

      - name: Start Gradio (background)
        run: |
          set -euxo pipefail
          nohup make run > gradio.log 2>&1 &
          echo $! > gradio_make_pid.txt || true

      - name: Wait for Gradio to respond
        run: |
          set -euxo pipefail
          for i in {1..180}; do
            if curl -fsS http://127.0.0.1:7860/ >/dev/null; then
              echo "Gradio is up"; exit 0; fi
            sleep 1
          done
          echo "Gradio did not start in time" >&2
          tail -n 200 gradio.log || true
          exit 1

      - name: Teardown Gradio
        if: always()
        run: |
          set -euxo pipefail
          if pgrep -f 'arxflix_gradio.py' >/dev/null; then
            pkill -f 'arxflix_gradio.py' || true
          fi
          sleep 2 || true
          if pgrep -f 'arxflix_gradio.py' >/dev/null; then
            pkill -9 -f 'arxflix_gradio.py' || true
          fi
          tail -n 200 gradio.log || true


